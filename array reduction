//Other solution is using PriorityQueue in Java which stores elements ccording to their natual ordering or by a comparater provided at queue construction time. Here is that code. This is super quick. I don't think they would like this direct approach.

public static int reductionCost(int[] num) {
		// num.length >= 2
		PriorityQueue<Integer> pq = new PriorityQueue<>();
		int totalCost = 0;
		for (int i = 0; i < num.length; i++) {
			pq.add(num[i]);
		}
		
		while (pq.size() > 1) {
			int num1 = pq.poll();
			int num2 = pq.poll();
			int cost = num1 + num2;
			totalCost += cost;
			pq.add(cost);
		}
		return totalCost;
	}
  
  
  //CHATGPT ---------------------------------------------------------------------------------------------------------------------------------------------------------
  
  int reductionCost(vector<int>& num) {
    // Create a min heap (priority queue)
    priority_queue<int, vector<int>, greater<int>> pq;

    // Add all elements to the priority queue
    for (int n : num) {
        pq.push(n);
    }

    int total_cost = 0;

    // While there are more than 1 element in the priority queue
    while (pq.size() > 1) {
        // Remove the two smallest elements
        int a = pq.top();
        pq.pop();
        int b = pq.top();
        pq.pop();

        // Calculate the cost of the move
        int cost = a + b;

        // Add the cost back to the priority queue
        pq.push(cost);

        // Update the total cost
        total_cost += cost;
    }

    return total_cost;
}
